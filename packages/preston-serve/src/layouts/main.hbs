<!DOCTYPE html>
<html ng-app="app">
<head ng-controller="HeadCtrl">
	<title>Preston</title>
	<link rel="stylesheet" ng-repeat="element in style.elements" ng-href=":: element.getAssetPath('css', 'style.css') ::">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
</head>
<body>
	<div ng-controller="NavCtrl" ui-sref-active="hide-menu" class="preston-header">
		<div class="preston-nav-item" ui-sref="home"><span>Home</span></div>
        <ul class="preston-nav-menu" ng-if="menu.length > 1">
            <li ng-repeat="element in menu" class="preston-nav-menu-item" ng-click="scrollTo(element)" ng-bind="element.label"></li>
        </ul>
        <div class="preston-views" ng-if="views.length > 1" ng-class="{ 'preston-views-display': showViews }">
            <div class="preston-view-heading" ng-click="showViews = !showViews">Views</div>
            <div class="preston-view-options">
                <div ng-repeat="view in views" ng-click="selectView(view)" ng-class="{ selected: view === selected }" ng-bind="view.name"></div>
            </div>
        </div>
	</div>
	<div class="preston-container" ui-view></div>
	<script src="/lib/angular.js"></script>
	<script src="/lib/angular-router.js"></script>
	<script src="/lib/angular-sanitize.js"></script>
	<script src="/lib/polyfill/es6-promise.js"></script>
	<script>
	angular
		.module('app', ['ngSanitize', 'ui.router'])
		.config(function($interpolateProvider, $stateProvider, $urlRouterProvider) {
			// stop conflicting with handlebars
			$interpolateProvider.startSymbol('::');
			$interpolateProvider.endSymbol('::');

			$urlRouterProvider.otherwise('/');
			$stateProvider
				.state('home', {
					url: '/',
					templateUrl: '/tmpl/home.html'
				})
				.state('guide', {
					url: '/style/:name',
					template: '<iframe ng-controller="GuideCtrl" ng-src="/tmpl/guide.html" class="preston-frame" ng-style="view"></iframe>'
				});
		})
		.service('MessageService', function() {
			function display(type, message) {
				alert(message);
			}
			return {
				error: function(message) {
					display('error', message);
				}
			};
		})
		.service('ApiService', function($http, MessageService) {
			return function(version, controller) {
				var versionParsed = parseFloat(version).toFixed(1);
				var baseUrl = '/api/' + versionParsed + '/' + controller;

				return {
					get: function(path) {
						return $http
							.get(baseUrl + (path || ''))
							.error(function(data) {
								MessageService.error(data.message || 'An error occured');
							});
					}
				}
			}
		})
		.factory('StylesFactory', function(ApiService) {
			var api = new ApiService(1.0, 'styles');

			// TODO: cache responses as some are
			// used in multiple controller instances
			return {
				get: function(name) {
					return api.get('/' + name).then(function(result) {
						return result.data;
					});
				},
				getAll: function() {
					return api.get().then(function(result) {
						return result.data;
					});
				},
				getElement: function(style, element) {
					return api.get('/' + style + '/' + element).then(function(result) {
						return result.data;
					});
				}
			};
		})
		.service('StyleElement', function(StylesFactory) {
			var StyleElement = function(style, name) {
				this.style = style;
				this.name = name;
				this.assets = {};
			};
			StyleElement.prototype = {
				getAssetPath: function(type, name) {
					return '/' + type + '/' + this.style + '/' + this.name + '/' + name;
				},
				fetch: function() {
					var self = this;
					return StylesFactory
						.getElement(this.style, this.name)
						.then(function(data) {
							self.assets = data.assets;
							return data;
						});
				}
			};
			return StyleElement;
		})
		.service('Style', function($rootScope, StylesFactory, StyleElement) {
			var Style = function(style, options) {
				this.title = '';
				this.name = style;
				this.cssPaths = [];
				this.elements = [];
				this.options = angular.extend({
					shallow: false
				}, options);
				this.fetch();
				return this;
			};
			Style.prototype = {
				fetch: function() {
					var self = this;
					return StylesFactory
						.get(this.name)
						.then(function(data) {
						    self.cssPaths = data.assets
						    .filter(function(asset) {
						        return asset.name == "css";
						    })
						    .map(function(asset) {
						        return asset.url;
						    });
							self.title = data.title;
							self.views = data.views;
							self.populateElements(data.elements)
								.then(function() {
									// pub/sub baby
									$rootScope.$broadcast('style.load', self);
								});
							return data;
						});
				},
				populateElements: function(elements) {
					var self = this;
					return Promise.all(
						elements.map(function(name) {
							return new Promise(function(resolve, reject) {
								var element = new StyleElement(self.name, name);

								// don't load style elements
								if (self.options.shallow) {
									resolve(element);
								} else {
									// wait for element to load before resolving
									element.fetch().then(function() {
										resolve(element);
									}, reject);
								}
							});
						})
					).then(function(elements) {
						self.elements = elements;
					});
				}
			};
			return Style;
		})
		.service('StyleView', function() {
			function StyleView(name, width, height) {
				this.name = name;
				this.style = this.getStyle(width, height);
			}

			StyleView.prototype.getStyle = function(width, height) {
				var style = {
					// specified dimensions
					width: width,
					height: height
				};

				// center align if pixels specified
				if (!!~width.indexOf('px')) {

					// offset margin to align
					var parsedHeight = parseInt(height, 10);
					var parsedWidth = parseInt(width, 10);
					var marginLeft = '-' + parsedWidth * 0.5 + 'px';
					var marginTop = '-' + parsedHeight * 0.5 + 'px';

					style = angular.extend({
						left: '50%',
						top: '50%',
						'margin-left': marginLeft,
						'margin-top': marginTop
					}, style);
				}

				return style;
			};

			return StyleView;
		})
		.controller('NavCtrl', function($rootScope, $scope, StylesFactory, StyleView) {

			// loads list of styles for entire app
			StylesFactory
				.getAll()
				.then(function(data) {
					$scope.styles = data;
				});

			var views = [new StyleView('Default', '100%', '100%')];

			$rootScope.$on('style.load', function(e, style) {
				$scope.views = views.concat(
					style.views && style.views.map(function(view) {
						return new StyleView(view.title, view.width, view.height);
					}) || []
				);
        $scope.menu = style.elements && style.elements.map(function(element) {
          return {
            label: element.name.replace('-', ' '),
            name: element.name
          }
        }) || [];
				$scope.$digest();
			});

			$scope.selectView = function(view) {
				$scope.selected = view;
				$rootScope.$broadcast('viewSelected', view);
			};

      $scope.scrollTo = function(element) {
        $rootScope.$broadcast('elementSelected', element);
      }
		})
		.controller('HeadCtrl', function($scope, Style) {

			// load default style
			$scope.style = new Style('preston', { shallow: true });

		}).controller('GuideCtrl', function($scope, $state, Style) {
			$scope.Style = Style;
			$scope.$state = $state;
			$scope.$on('viewSelected', function(e, view) {
				$scope.view = view.style;
			});
		});
	</script>
</body>
</html>
